package com.example.burnestimation

import android.Manifest
import android.app.AlertDialog
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Color
import android.graphics.ImageFormat
import android.hardware.camera2.CameraCharacteristics
import android.hardware.camera2.CameraManager
import android.hardware.camera2.CameraMetadata
import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat
import androidx.fragment.app.viewModels
import androidx.navigation.findNavController
import com.example.burnestimation.datamodel.Patient
import com.example.burnestimation.viewmodels.PatientViewModel
import com.example.burnestimation.viewmodels.PatientViewModelFactory
import com.google.android.material.datepicker.MaterialDatePicker
import com.google.android.material.snackbar.Snackbar
import com.google.android.material.textfield.TextInputLayout
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

// TODO: read input data, create new patient, add to dataset / local database.
/**
 * New patient fragment
 * set new patient info here before taking picture for Burn Area Estimation
 */
class PatientNewFragment : Fragment() {

    // link to the database application
    private val patientViewModel: PatientViewModel by viewModels {
        PatientViewModelFactory((requireActivity().application as PatientsApplication).repository)
    }

    private val outputDateFormat = SimpleDateFormat("dd MMM. yyyy", Locale.getDefault())

    // fields
//    private v

    private val requestPermissionLauncher =
        registerForActivityResult(
            ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                Log.i("Permission: ", "Granted")
            } else {
                Log.i("Permission: ", "Denied")
            }
        }

    private fun requestPermission() {
        when {
            ContextCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.CAMERA
            ) == PackageManager.PERMISSION_GRANTED -> {
                // Permission has already been granted
                Log.d("Permission: ", "Permissions have already been granted")
            }
            shouldShowRequestPermissionRationale(Manifest.permission.CAMERA) -> {
                Snackbar.make(
                    requireActivity().findViewById(android.R.id.content),
                    getString(R.string.camera_permission_required),
                    Snackbar.LENGTH_LONG
                ).show()
                requestPermissionLauncher.launch(
                    Manifest.permission.CAMERA)
            }
            else -> {
                // You can directly ask for the permission.
                // The registered ActivityResultCallback gets the result of this request.
                requestPermissionLauncher.launch(
                    Manifest.permission.CAMERA)
            }
        }

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_patient_new, container, false)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // request camera permissions
        requestPermission()

        val cameraManager =
            requireContext().getSystemService(Context.CAMERA_SERVICE) as CameraManager

        setupForm()

        // record patient data and launch fullscreen camera widget
        val cameraBtn = view.findViewById<Button>(R.id.buttonCamera)
        cameraBtn.setOnClickListener {

            if ( fieldsValid() ) {

                Log.d(TAG, "valid fields")

                // read Form return patient
                val newPatient = readForm()

                // create file uri
                val imgUri = File(
                        requireActivity().filesDir,
                "IMG_${SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault()).format(Date())}.jpg"
                )

                Log.d(TAG, imgUri.toString())
                newPatient.imageUri = imgUri.toString()

                // insert new patient into local database, and get the autogenerated key
                patientViewModel.insert(newPatient).observe(viewLifecycleOwner, {
                    val pDBID = it.toInt()

                    // get back facing camera ID
                    val cameraID = getFirstCameraIdFacing(cameraManager, CameraCharacteristics.LENS_FACING_BACK)

                    if (cameraID != null) {
                        val action = PatientNewFragmentDirections
                            .actionPatientNewFragmentToCameraFragment(
                                cameraId = cameraID,
                                pixelFormat = ImageFormat.JPEG,
                                imgUri = imgUri.toString(),
                                patientDBID = pDBID
                            )
                        view.findNavController().navigate(action)
                    } else {
                        Snackbar.make(
                            requireActivity().findViewById(android.R.id.content),
                            "failed find back facing camera!",
                            Snackbar.LENGTH_LONG
                        ).show()
                    }
                })
            } else {

                Log.d(TAG, "invalid fields")

                Snackbar.make(
                    requireActivity().findViewById(android.R.id.content),
                    "Please fill required fields",
                    Snackbar.LENGTH_LONG
                ).show()
            }
        }

        // cancel new patient create
        val cancelBtn = view.findViewById<Button>(R.id.buttonCancel)
        cancelBtn.setOnClickListener {
            val action = PatientNewFragmentDirections.actionPatientNewFragmentToPatientsFragment()
            view.findNavController().navigate(action)
        }
    }

    private fun generateID(length: Int = 12) : String {
        val charPool = ('A'..'Z') + ('0'..'9')
        return (1..length)
            .map { charPool.random() }
            .joinToString("")
    }

    /**
     * Check if required fields are filled
     */
    private fun fieldsValid(): Boolean {

        Log.d(TAG, requireView().findViewById<TextView>(R.id.patientWeight).text.toString().toFloatOrNull().toString())
        Log.d(TAG, requireView().findViewById<TextView>(R.id.patientHeight).text.toString().toFloatOrNull().toString())
        Log.d(TAG, (requireView().findViewById<TextView>(R.id.recordingDate).text.toString() != "").toString())
        Log.d(TAG, (requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).isChecked).toString())

        var res: Boolean = true

        if (requireView().findViewById<TextView>(R.id.patientWeight).text.toString().toFloatOrNull() == null) {
            Log.d(TAG, "weight")
            requireView().findViewById<TextInputLayout>(R.id.layout_patientWeight).error = "required"
            res = false
        } else {
            requireView().findViewById<TextInputLayout>(R.id.layout_patientWeight).error = null
        }

        if (requireView().findViewById<TextView>(R.id.patientHeight).text.toString().toFloatOrNull() == null) {
            Log.d(TAG, "height")
            requireView().findViewById<TextInputLayout>(R.id.layout_patientHeight).error = "required"
            res = false
        }else {
            requireView().findViewById<TextInputLayout>(R.id.layout_patientHeight).error = null
        }

        if (requireView().findViewById<TextView>(R.id.recordingDate).text.toString() == "") {
            requireView().findViewById<TextInputLayout>(R.id.layout_recordingDate).error = "required"
            res = false
        } else {
            requireView().findViewById<TextInputLayout>(R.id.layout_recordingDate).error = null
        }

        if (! requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).isChecked) {
            requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).setTextColor(Color.rgb(176, 0, 32))
            requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).error = "required"
            res = false
        } else {
            requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).error = null
            requireView().findViewById<CheckBox>(R.id.checkBoxUsageNotification).setTextColor(Color.GRAY)
        }

        return res

    }

    private fun setupForm() {

        Log.d(TAG, Locale.getDefault().toString())

        val hospitalIDFieldLayout = requireView().findViewById<TextInputLayout>(R.id.layout_patientID)
        val hospitalIDField = requireView().findViewById<TextView>(R.id.patientID)

        val heightFieldLayout = requireView().findViewById<TextInputLayout>(R.id.layout_patientHeight)
        val heightField = requireView().findViewById<TextView>(R.id.patientHeight)

        val weightFieldLayout = requireView().findViewById<TextInputLayout>(R.id.layout_patientWeight)
        val weightField = requireView().findViewById<TextView>(R.id.patientWeight)

        val dateFieldLayout = requireView().findViewById<TextInputLayout>(R.id.layout_recordingDate)
        val dateField = requireView().findViewById<TextView>(R.id.recordingDate)

        // date picker setup
        dateField.text = outputDateFormat.format(Date())

        val datePicker =
            MaterialDatePicker.Builder.datePicker()
                .setTitleText("Select date")
                .setSelection(MaterialDatePicker.todayInUtcMilliseconds())
                .build()

        datePicker.addOnPositiveButtonClickListener {
            val utcTime = Date(it)
            outputDateFormat.timeZone = TimeZone.getTimeZone("UTC")
            dateField.text = outputDateFormat.format(utcTime)
        }

        dateFieldLayout.setEndIconOnClickListener {
            datePicker.show(parentFragmentManager, datePicker.toString())
        }

        // generate ID
        hospitalIDFieldLayout.setEndIconOnClickListener {
            hospitalIDField.text = generateID()
        }

        // user is not in the US
        if (Locale.getDefault() != Locale.US) {
            heightFieldLayout.suffixText = "meters"
            weightFieldLayout.suffixText = "kgs"

            heightField.setOnClickListener {
                floatPicker("meters", 1, 7)
            }

            weightField.setOnClickListener {
                floatPicker("kgs", 77, 0)
            }

        } else {

            heightField.setOnClickListener {
                imperialHeightPicker()
            }

            weightField.setOnClickListener {
                floatPicker("lbs", 175, 0)
            }

        }
    }

    private fun readForm(): Patient {

        // convert height to metric
        val pHeight: Float = if (Locale.getDefault() == Locale.US) {
            requireView().findViewById<TextView>(R.id.patientHeight).text.toString().toFloat() * 2.54f
        } else {
            requireView().findViewById<TextView>(R.id.patientHeight).text.toString().toFloat() * 100
        }

        // convert weight to metric
        val pWeight: Float = if (Locale.getDefault() == Locale.US) {
            requireView().findViewById<TextView>(R.id.patientWeight).text.toString().toFloat() / 2.205f
        } else {
            requireView().findViewById<TextView>(R.id.patientWeight).text.toString().toFloat()
        }

        val patient = Patient(
            null,
            requireView().findViewById<TextView>(R.id.patientID).text.toString(),
            requireView().findViewById<TextView>(R.id.patientName).text.toString(),
            pHeight,
            pWeight,
            requireView().findViewById<TextView>(R.id.recordingDate).text.toString(),
            requireView().findViewById<TextView>(R.id.attendingProvider).text.toString(),
            requireView().findViewById<TextView>(R.id.institution).text.toString(),
        )

        return patient
    }

    private fun getFirstCameraIdFacing(
        cameraManager: CameraManager,
        facing: Int = CameraMetadata.LENS_FACING_BACK
    ): String? {
        // Get list of all compatible cameras
        val cameraIds = cameraManager.cameraIdList.filter {
            val characteristics = cameraManager.getCameraCharacteristics(it)
            val capabilities = characteristics.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES)
            capabilities?.contains(
                CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE) ?: false
        }

        // Iterate over the list of cameras and return the first one matching desired
        // lens-facing configuration
        cameraIds.forEach {
            val characteristics = cameraManager.getCameraCharacteristics(it)
            if (characteristics.get(CameraCharacteristics.LENS_FACING) == facing) {
                return it
            }
        }
        // If no camera matched desired orientation, return the first one from the list
        return cameraIds.firstOrNull()
    }

    private fun floatPicker(extension: String, default_int: Int, default_dec: Int) {

        val d = AlertDialog.Builder(context)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_float_picker, null)

        if ("meters" == extension) {
            d.setTitle("Select Patient Height")
        } else {
            d.setTitle("Select Patient Weight")
        }
        d.setMessage(R.string.why_height_weight)
        d.setView(dialogView)

        dialogView.findViewById<TextView>(R.id.extension).text = extension

        val intPicker = dialogView.findViewById<NumberPicker>(R.id.dialog_int_picker)
        intPicker.maxValue = 500
        intPicker.minValue = 0
        intPicker.wrapSelectorWheel = false
        intPicker.value = default_int

        val decPicker = dialogView.findViewById<NumberPicker>(R.id.dialog_decimal_picker)
        decPicker.maxValue = 9
        decPicker.minValue = 0
        decPicker.value = default_dec
        decPicker.wrapSelectorWheel = false

        d.setPositiveButton("Done") { _, _ ->
            if ("meters" == extension) {
                requireView().findViewById<TextView>(R.id.patientHeight).text = (intPicker.value.toString() + "." + decPicker.value.toString())
            } else {
                requireView().findViewById<TextView>(R.id.patientWeight).text = (intPicker.value.toString() + "." + decPicker.value.toString())            }

        }
        d.setNegativeButton("Cancel") { _, _ -> }
        val alertDialog = d.create()
        alertDialog.show()

    }

    private fun imperialHeightPicker() {
        val d = AlertDialog.Builder(context)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_imperial_height_picker, null)
        d.setTitle("Select Patient Height")
        d.setMessage(R.string.why_height_weight)
        d.setView(dialogView)

        val feetPicker = dialogView.findViewById<NumberPicker>(R.id.dialog_height_ft_picker)
        feetPicker.maxValue = 9
        feetPicker.minValue = 0
        feetPicker.wrapSelectorWheel = false
        feetPicker.value = 5
        feetPicker.setOnValueChangedListener { feetPicker, i, i1 -> println("onValueChange: ") }

        val inchPicker = dialogView.findViewById<NumberPicker>(R.id.dialog_height_in_picker)
        inchPicker.maxValue = 11
        inchPicker.minValue = 0
        inchPicker.value = 7
        inchPicker.wrapSelectorWheel = false
        inchPicker.setOnValueChangedListener { inchPicker, i, i1 -> println("onValueChange: ") }

        d.setPositiveButton("Done") { dialogInterface, i ->
            requireView().findViewById<TextView>(R.id.patientHeight).text = (feetPicker.value * 12 + inchPicker.value).toString()
        }
        d.setNegativeButton("Cancel") { dialogInterface, i -> }
        val alertDialog = d.create()
        alertDialog.show()

    }


    companion object {

    }
}